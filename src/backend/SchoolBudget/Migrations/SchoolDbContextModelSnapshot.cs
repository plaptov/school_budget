// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolBudget.Dal;

#nullable disable

namespace SchoolBudget.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchoolBudget.Entities.Adult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Adults");
                });

            modelBuilder.Entity("SchoolBudget.Entities.AdultLink", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdultId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "AdultId");

                    b.HasIndex("AdultId");

                    b.ToTable("AdultLinks");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("FundId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SchoolBudget.Entities.ExpenseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseItems");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Fund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Fundraising", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("ClosingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("FundId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RecommendedAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.ToTable("Fundraising");
                });

            modelBuilder.Entity("SchoolBudget.Entities.FundraisingMember", b =>
                {
                    b.Property<long>("FundraisingId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("FundraisingId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("FundraisingMembers");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Income", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("FundId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FundraisingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.HasIndex("FundraisingId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("AdultId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AdultId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolBudget.Entities.AdultLink", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Adult", "Adult")
                        .WithMany()
                        .HasForeignKey("AdultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBudget.Entities.Student", "Student")
                        .WithMany("AdultLinks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adult");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Expense", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("SchoolBudget.Entities.ExpenseItem", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Expense", null)
                        .WithMany("Items")
                        .HasForeignKey("ExpenseId");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Fundraising", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("SchoolBudget.Entities.FundraisingMember", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Fundraising", "Fundraising")
                        .WithMany("Members")
                        .HasForeignKey("FundraisingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBudget.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fundraising");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Income", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBudget.Entities.Fundraising", "Fundraising")
                        .WithMany()
                        .HasForeignKey("FundraisingId");

                    b.HasOne("SchoolBudget.Entities.Payment", "Payment")
                        .WithMany("Incomes")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Fund");

                    b.Navigation("Fundraising");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Payment", b =>
                {
                    b.HasOne("SchoolBudget.Entities.Adult", "Adult")
                        .WithMany()
                        .HasForeignKey("AdultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBudget.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adult");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Expense", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Fundraising", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Payment", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("SchoolBudget.Entities.Student", b =>
                {
                    b.Navigation("AdultLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
